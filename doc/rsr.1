.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "RSR" "1" "May 2022" "Reposaur" "Reposaur Manual"
.
.SH "NAME"
\fBrsr\fR \- security & compliance for development platforms
.
.SH "SYNOPSIS"
\fBrsr\fR [\fB\-\-exec\fR] [\fB\-p\fR \fIPOLICY_PATH\fR] [\fB\-n\fR \fINAMESPACE\fR] [\fB\-o\fR \fIOUTPUT\fR] [INPUT]
.
.br
\fBrsr\fR \fB\-\-test\fR [\fB\-o\fR \fIOUTPUT\fR]
.
.br
.
.SH "DESCRIPTION"
Reposaur (\fBrsr\fR) executes Rego \fIpolicies\fR in \fIPOLICY_PATH\fR against \fIINPUT\fR and outputs SARIF reports to \fIOUTPUT\fR\. The \fIINPUT\fR argument is optional and defaults to standard input\. Only a single \fIINPUT\fR file may be specified\. If \fB\-o\fR is not specified, \fIOUTPUT\fR defaults to standard output\.
.
.P
See also rego\-language(1) and rego\-reference(1)\.
.
.SH "OPTIONS"
.
.TP
\fB\-p\fR, \fB\-\-policy\fR=\fIPOLICY_PATH\fR
Execute or test the \fIpolicies\fR at \fIPOLICY_PATH\fR\. The path can be either a file or directory\. Directories are loaded recursively\. Defaults to current working directory\.
.
.TP
\fB\-T\fR, \fB\-\-trace\fR
Enables policy execution tracing\.
.
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Print debug logs to standard error output\.
.
.TP
\fB\-V\fR, \fB\-\-version\fR
Print the version and exit\.
.
.TP
\fB\-h\fR, \fB\-\-help\fR
Print usage and exit\.
.
.SS "Execution options"
.
.TP
\fB\-e\fR, \fB\-\-exec\fR
Executes policies\. Can\'t be used with \fB\-t\fR/\fB\-\-test\fR\.
.
.TP
\fB\-o\fR, \fB\-\-output\fR=\fIOUTPUT\fR
Write reports to \fIOUTPUT\fR instead of standard output\. If \fIOUTPUT\fR already exists it will be overwritten\.
.
.TP
\fB\-n\fR, \fB\-\-namespace\fR=\fINAMESPACE\fR
The name of the policy package (see \fIPOLICIES\fR) that will be executed\. \fINamespaces\fR are detected automatically for \fIrepositories\fR, \fIorganizations\fR, \fIusers\fR, \fIissues\fR and \fIpull requests\fR\.
.
.SS "Test options"
.
.TP
\fB\-t\fR, \fB\-\-test\fR
Test policies\. Can\'t be used with \fB\-e\fR/\fB\-\-exec\fR\.
.
.SH "POLICIES"
Policies are written using the Rego query language\.
.
.SS "Namespaces"
Policy modules start with a package definition\. The package\'s name is what we call a \fInamespace\fR\.
.
.IP "" 4
.
.nf

package <NAMESPACE>
.
.fi
.
.IP "" 0
.
.P
Namespaces are used to tell Reposaur which policies it should apply to which data\.
.
.P
The natively supported namespaces are:
.
.TP
\fBrepository\fR
A GitHub Repository\.
.
.TP
\fBpull_request\fR
A GitHub Pull Request\.
.
.TP
\fBissue\fR
A GitHub Issue\.
.
.TP
\fBuser\fR
A GitHub User\.
.
.TP
\fBorganization\fR
A GitHub Organization\.
.
.P
Custom namespaces can be specified with the \fB\-n\fR/\fB\-\-namespace\fR flag\.
.
.SS "Rules"
Only rules with specific prefixes are considered when executing policies:
.
.TP
\fBviolation_\fR, \fBfail_\fR, \fBerror_\fR
Rules that \fImust\fR not fail and pose high security issues\. Correspond to \fBerror\fR in SARIF reports and have \fBCRITICAL\fR severity level\.
.
.TP
\fBwarning_\fR, \fBwarn_\fR
Rules that \fIshould\fR not fail and pose medium security issues\. Correspond to \fBwarning\fR in SARIF reports and have \fBMEDIUM\fR severity level\.
.
.TP
\fBnote_\fR, \fBinfo_\fR
Rules that \fIcan\fR fail and don\'t pose a security issue\. Correspond to \fBnote\fR in SARIF reports and have \fBLOW\fR severity level\.
.
.P
Additionally, there is a special rule to skip rules in certain cases:
.
.IP "" 4
.
.nf

# Skip repositories from the "note_empty_description"
# rule if they\'re not in the InnerSource program
skip[rules] {
    count({t | input\.topics[t] == "innersource"}) == 0
    rules := ["empty_description"]
}
.
.fi
.
.IP "" 0
.
.P
Note that to skip a rule we don\'t have to specify it\'s prefix\.
.
.SS "Built\-in functions"
Rego comes with a lot of handy built\-in functions\. Reposaur extends with the following:
.
.TP
\fBgithub\.request(<PATH>, <DATA>)\fR
Perform an HTTP request to the GitHub REST API\. Supports the same syntax as Octokit\.js\.
.
.IP "" 4
.
.nf

resp := github\.request("GET /repos/{owner}/{repo}", {
  "owner": "reposaur",
  "repo": "reposaur",
})

resp\.status == 200 # true
resp\.body\.name == "reposaur" # true
.
.fi
.
.IP "" 0

.
.TP
\fBgithub\.graphql(<QUERY>, <VARIABLES>)\fR
Perform an HTTP request to the GitHub GraphQL API\.
.
.IP "" 4
.
.nf

resp := github\.graphql(
  `
    query($owner: String!, $name: String!) {
      repository(owner: $owner, name: $name) {
        name
      }
    }
  `,
  {
    "owner": "reposaur",
    "name": "reposaur",
  }
)

resp\.status == 200 # true
resp\.body\.data\.repository\.name == "reposaur" # true
.
.fi
.
.IP "" 0

.
.SS "Metadata"
Rules in policies can have metadata fields to enhance them with relevant information\. This section always starts with a \fB# METADATA\fR header\.
.
.TP
\fBtitle\fR
A short, single\-sentence description of the rule\.
.
.TP
\fBdescription:\fR A longer description of the rule, possibly including how\-to fix any issues and references\. Supports Markdown\.

.
.TP
\fBcommon\.tags\fR
List of tags that can further help identifying the rule subject or group rules by common topics\.
.
.TP
\fBcommon\.security\-severity\fR
A number between 0 and 10 that expresses the security severity of the rule\. Over 9\.0 is \fBCRITICAL\fR, 7\.0 to 8\.9 is \fBHIGH\fR, 4\.0 to 6\.9 is \fBMEDIUM\fR and 3\.9 or less is \fBLOW\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

# METADATA
# title: Repository description is empty
# description: >
#   The repository\'s description is empty, making it harder
#   for organization members and auditors to understand the
#   scope of the project\.
#
#   Fix by adding a description to the repository in the homepage\.
#
#   See also [InnerSource Guidelines](#)
# common:
#   tags: [best\-practices, innersource]
#   security\-severity: 0
note_empty_description {
    input\.description == ""
}
.
.fi
.
.IP "" 0
.
.SS "Tests"
Test modules must have a \fB_test\.rego\fR extension and rules must have the \fBtest_\fR prefix\.
.
.P
For the policy:
.
.TP
\fBinnersource\.rego\fR:
.
.IP "" 4
.
.nf

package repository

note_empty_description {
    input\.description == ""
}
.
.fi
.
.IP "" 0

.
.P
We could write the following test:
.
.TP
\fBinnersource_test\.rego\fR:
.
.IP "" 4
.
.nf

package repository

test_empty_description_should_fail {
    note_empty_description with input\.description as ""
}

test_with_description_should_pass {
    not note_empty_description with input\.description as "some description"
}
.
.fi
.
.IP "" 0

.
.P
Running these tests should result in success:
.
.IP "" 4
.
.nf

$ rsr \-t
0:00AM INF data\.repository\.test_empty_description_should_fail: PASS (915µs)
0:00AM INF data\.repository\.test_with_description_should_pass: PASS (54\.125µs)
0:00AM INF done failed=0 passed=2 timeEllapsed=1\.9335 total=2
.
.fi
.
.IP "" 0
.
.SH "EXIT STATUS"
When executing policies, \fBrsr\fR will exit 0 even if there are \fIrules\fR failing\.
.
.P
When running policy tests, \fBrsr\fR will exit 1 if there are tests failing and exit 0 otherwise\.
.
.P
If an error occurs during policy compilation or execution, will exit 1\. Note that reports might have already been produced and written to \fIOUTPUT\fR\.
.
.SH "EXAMPLES"
Streaming data from a file:
.
.IP "" 4
.
.nf

$ cat repos\.json | rsr

$ rsr repos\.json
.
.fi
.
.IP "" 0
.
.P
Streaming data from GitHub API:
.
.IP "" 4
.
.nf

$ gh api /orgs/reposaur/repos | rsr

$ curl https://api\.github\.com/orgs/reposaur/repos | rsr
.
.fi
.
.IP "" 0
.
.P
Outputing to a file instead of standard output:
.
.IP "" 4
.
.nf

$ cat repos\.json | rsr \-o out

$ cat repos\.json | rsr > out
.
.fi
.
.IP "" 0
.
.P
Piping to other tools:
.
.IP "" 4
.
.nf

$ cat repos\.json | rsr | jq \-s length
.
.fi
.
.IP "" 0
.
.P
Running policy tests:
.
.IP "" 4
.
.nf

$ rsr \-\-test
.
.fi
.
.IP "" 0
.
.P
Uploading a report to GitHub Code Scanning:
.
.IP "" 4
.
.nf

$ full_name="reposaur/reposaur"

$ branch="main"

$ commit_sha=$(gh api "/repos/$full_name/branches/$branch" \-q \'\.commit\.sha\')

$ report=$(gh api "/repos/$full_name" | rsr | gzip | base64)

$ gh api "/repos/$full_name/code\-scanning/sarifs" \e
    \-f sarif="$report" \e
    \-f commit_sha="$commit_sha" \e
    \-f ref="$branch"
.
.fi
.
.IP "" 0
.
.SH "SEE ALSO"
repository \fIhttps://github\.com/reposaur/reposaur\fR, playground \fIhttps://play\.reposaur\.com\fR, opa(1), rego\-language(1), rego\-reference(1)
.
.SH "BUGS"
If you find any issue using Reposaur, please fill a bug report \fIhttps://github\.com/reposaur/reposaur/issues/new?assignees=&labels=bug%2Ctriage&template=bug_report\.yml&title=%5BBug%5D%3A+\fR\. We appreciate it!
.
.SH "AUTHORS"
Joao Cerqueira \fIoss@cerqueira\.io\fR
